/*
* fixed12 range of (-2047 to 2047)[12bits] and precision of (0.0625 - 0.9375)[4bits]
* 0xFFFFFFF0 is reserved for -0.? instead of 0x80000000 due to glitches
* v3
* int notation is twice the length of int16 to accomodate all possible variables
*/

#include <iostream>
#include <stdint.h>

#define UINT8 uint8_t
#define UINT16 uint16_t

#define INT16 signed short
#define BOOL unsigned char
#define TRUE 1
#define FALSE 0

//constants (32bits)
typedef INT16 fixed16;
const int signMaskInt32 = 0x80000000;
const fixed16 fractionMaskF16 = 0xFFFF >> 12;
const fixed16 signMaskF16 = 0x8000;
const fixed16 baseMaskF16 = (-1 ^ fractionMaskF16) - signMaskF16;

//define macros
#define SIGNISSET(x) (x < 0)
#define SIGNINT32(x) (x & signMaskInt32)
#define BASEINT32(x) (x / 10000)
#define FRACTIONINT32(x) (x - (BASEINT32(x)*10000))
#define SIGNF16(x) (x & signMaskF16)
#define BASEF16(x) (x & baseMaskF16)
#define FRACTIONF16(x) (x & fractionMaskF16)
#define FRACTIONF16TOINT(x) (\
                                0 +\
                                (((x & 0x00000001)>0)? 0625 : 0) +\
                                (((x & 0x00000002)>0)? 1250 : 0) +\
                                (((x & 0x00000004)>0)? 2500 : 0) +\
                                (((x & 0x00000008)>0)? 5000 : 0)\
                            )
#define BASEF16TOINT(x) ((BASEF16(x) >> 4) * 10000)
//#define ABSF16(x) ((SIGNF16(x) > 0)? (0xFFFFFFF0 - (x & 0xFFFFFFF0)) + (x & 0x0000000F) : x)

//fixed16 operators
fixed16 absF16(fixed16 x)
{
    return ((SIGNISSET(x) > 0) ? (0xFFFFFFF0 - (x & 0xFFFFFFF0)) + (x & 0x0000000F) : x);
}

fixed16 addF16(fixed16 x, fixed16 add)
{
    fixed16 ret = x + add - ((SIGNISSET(x) || SIGNISSET(add)) ? 0x00000010 : 0);
    if ((ret & 0xFFFFFFF0) == 0xFFFFFFF0)
    {
        ret = 0;
        ret -= FRACTIONF16TOINT(ret);
    }
    return ret;
}

fixed16 subF16(fixed16 x, fixed16 sub)
{
    sub = SIGNISSET(sub) ? absF16(sub) : 0 - sub;
    return addF16(x, sub);
}

fixed16 divF16(fixed16 x, fixed16 div)
{
    if (x == 0x00000000 || div == 0x00000000) return 0; //multiplications by 0 = 0
    BOOL signX = FALSE;
    BOOL signMul = FALSE;
    fixed16 ret = 0x00000000;

    return ret;
}

fixed16 mulF16(fixed16 x, fixed16 mul)
{
    if (x == 0x00000000 || mul == 0x00000000) return 0; //multiplications by 0 = 0

    BOOL signX = FALSE;
    BOOL signMul = FALSE;
    fixed16 ret = 0x00000000;
    fixed16 mulBase = (BASEF16(mul) >> 4);

    if (SIGNISSET(x))
    {
        x = 0x00000000 - (SIGNF16(x) + BASEF16(x)) + FRACTIONF16(x);
        signX = TRUE;
    }
    if (SIGNISSET(mul))
    {
        mul = 0x80000000 - (SIGNF16(mul) + BASEF16(mul)) + FRACTIONF16(mul);
        signMul = TRUE;
    }

    ret = x;
    mulBase--; //set x to ret
    //multiply with full value first
    for (; mulBase > 1; mulBase--)
    {
        ret <<= 1;
    }
    //apply fraction
    fixed16 frac = 0x00000000;
    if ((FRACTIONF16(mul) & 0x00000008) > 0) frac += x / 2;
    if ((FRACTIONF16(mul) & 0x00000004) > 0) frac += x / 4;
    if ((FRACTIONF16(mul) & 0x00000002) > 0) frac += x / 8;
    if ((FRACTIONF16(mul) & 0x00000001) > 0) frac += x / 16;
    ret += frac;
    if (signX != signMul) ret = 0x00000000 - BASEF16(ret) - FRACTIONF16(ret); //expected outcome should be negative (likely errors on larger numbers)

    return ret;
}

//fixed16 conversion methods
int f16ToInt32(fixed16 x)
{
    int ret = 0x00000000;
    //printf("ret: %d, retH: %X, x: %X\n", ret, ret, x);

    if ((x & 0xFFFFFFF0) == 0xFFFFFFF0)
    {
        ret -= 10000;
        ret -= FRACTIONF16TOINT(x);
        return ret;
    }

    if (SIGNISSET(x) > 0)
    {
        printf("fToI SIGN ALERT - X: %X, ABS: %X\n", x, absF16(x));
        x = absF16(x);
        ret -= BASEF16TOINT(x);
        ret -= FRACTIONF16TOINT(x);
        //printf("ret: %d, retH: %X, x: %X\n", ret, ret, x);
    }
    else
    {
        ret += BASEF16TOINT(x);
        ret += FRACTIONF16TOINT(x);
    }

    return ret;
}

fixed16 int32ToF16(int value)
{
    if (value == 0) {
        return 0;
    }

    fixed16 ret;
    //TODO: fraction check if null set base

    UINT8 fraction;

    INT16 base;
    INT16 tempBase;
    BOOL baseIsNull = FALSE;

    //set base
    base = 0x00000000;
    tempBase = value / 10000; //delete fraction value
    base = tempBase << 4; //shift 4 bits over to pos [4-15]

    //check for leading zeros
    if (tempBase < 10000 && tempBase > -10000)
    {
        baseIsNull = TRUE;
    }

    //extract and convert fraction
    fraction = 0x00;
    value -= tempBase * 10000; //delete base value
    if (value > 0x80000000) //check if value is negative
    {
        value = 0xFFFFFFFF - value + 1; //ABS
        //base -= 0x00000010; //carry
    }
    if (value / 5000 > 0 && value > 0)
    {
        fraction |= 0x1 << 3;
        value -= 5000;
    }
    //0.25
    if (value / 2500 > 0 && value > 0)
    {
        fraction |= 0x1 << 2;
        value -= 2500;
    }
    //0.125
    if (value / 1250 > 0 && value > 0)
    {
        fraction |= 0x1 << 1;
        value -= 1250;
    }
    //0.0625
    if (value / 625 > 0 && value > 0)
    {
        fraction |= 0x1 << 0;
        value -= 625;
    }

    ret = base;      //bits[15-4]
    ret |= fraction; //bits[3-0]

    return ret;
}

int main()
{
    fixed16 f1;
    int i;

    //loop minus numbers;
    i = -10000;
    for (int j = 0; j < 5; j++)
    {
        f1 = int32ToF16(i);
        printf("I32: %d, I32CONV: %d, F16: %X, sign: %X, base: %X, frac: %X\n\n", i, f16ToInt32(f1), f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));
        i += 10000;
    }

    //SET NEGATIVE VAL
    i = -10000; //-1;
    f1 = int32ToF16(i);
    printf("I32: %d, sign: %X, base: %d, frac: %d\n", i, SIGNINT32(i), BASEINT32(i), FRACTIONINT32(i));
    printf("F16: %X, sign: %X, base: %X, frac: %X\n\n", f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));

    //CONVERT BACK NEGATIVE VAL
    i = 0;
    i = f16ToInt32(f1);
    printf("I32: %d, sign: %X, base: %d, frac: %d\n", i, SIGNINT32(i), BASEINT32(i), FRACTIONINT32(i));
    printf("F16: %X, sign: %X, base: %X, frac: %X\n\n", f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));

    //SET POSITIVE VAL
    i = 15000; //1.5
    f1 = int32ToF16(i);
    printf("I32: %d, sign: %X, base: %d, frac: %d\n", i, SIGNINT32(i), BASEINT32(i), FRACTIONINT32(i));
    printf("F16: %X, sign: %X, base: %X, frac: %X\n\n", f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));

    //CONVERT BACK POSITIVE VAL
    i = 0;
    i = f16ToInt32(f1); //check if value is still the same
    printf("I32: %d, sign: %X, base: %d, frac: %d\n", i, SIGNINT32(i), BASEINT32(i), FRACTIONINT32(i));
    printf("F16: %X, sign: %X, base: %X, frac: %X\n\n", f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));

    //ADD
    f1 = addF16(f1, int32ToF16(15000));
    printf("%X+%X=%X\n", int32ToF16(15000), int32ToF16(15000), f1);
    i = f16ToInt32(f1); //check if value is still the same
    printf("I32: %d, sign: %X, base: %d, frac: %d\n", i, SIGNINT32(i), BASEINT32(i), FRACTIONINT32(i));
    printf("F16: %X, sign: %X, base: %X, frac: %X\n\n", f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));

    //ADD minus (FK minus values)
    f1 = int32ToF16(-15000);
    f1 = addF16(f1, int32ToF16(15000));
    printf("%X+%X=%X\n", int32ToF16(-15000), int32ToF16(15000), f1);
    i = f16ToInt32(f1); //check if value is still the same
    printf("I32: %d, sign: %X, base: %d, frac: %d\n", i, SIGNINT32(i), BASEINT32(i), FRACTIONINT32(i));
    printf("F16: %X, sign: %X, base: %X, frac: %X\n\n", f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));

    //SUB minus (FK minus values)
    f1 = int32ToF16(-25000);
    f1 = subF16(f1, int32ToF16(-15000));
    printf("%X-%X=%X\n", int32ToF16(-25000), int32ToF16(-15000), f1);
    i = f16ToInt32(f1); //check if value is still the same
    printf("I32: %d, sign: %X, base: %d, frac: %d\n", i, SIGNINT32(i), BASEINT32(i), FRACTIONINT32(i));
    printf("F16: %X, sign: %X, base: %X, frac: %X\n\n", f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));

    //MUL
    f1 = int32ToF16(20000);
    f1 = mulF16(f1, int32ToF16(48795));
    printf("%X*%X=%X\n", int32ToF16(20000), int32ToF16(48795), f1); //20*4E
    i = f16ToInt32(f1); //check if value is still the same
    printf("I32: %d, sign: %X, base: %d, frac: %d\n", i, SIGNINT32(i), BASEINT32(i), FRACTIONINT32(i));
    printf("F16: %X, sign: %X, base: %X, frac: %X\n\n", f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));

    //MUL minus both (ABS)
    f1 = int32ToF16(-20000);
    f1 = mulF16(f1, int32ToF16(-48795));
    printf("%X*%X=%X\n", int32ToF16(-20000), int32ToF16(-48795), f1); //20*4E
    i = f16ToInt32(f1); //check if value is still the same
    printf("I32: %d, sign: %X, base: %d, frac: %d\n", i, SIGNINT32(i), BASEINT32(i), FRACTIONINT32(i));
    printf("F16: %X, sign: %X, base: %X, frac: %X\n\n", f1, SIGNF16(f1), BASEF16(f1), FRACTIONF16(f1));

    return 0;
}